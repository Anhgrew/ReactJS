# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  GITHUB_ACTION_ROLE: arn:aws:iam::497913249056:role/github-action-role
  S3_BUCKET: anhgrew-s3-frontend
  S3_BUCKET_BACKUP: anhgrew-backup
  CLOUDFRONT_URL: d2ht4cfggmutd2.cloudfront.net  
  DISTRIBUTION_ID: E3632AOE2GVN8J
  
jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npm" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "12.22.12"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          
      # - name: Setup Pages
      #   uses: actions/configure-pages@v4
      #   with:
      #     static_site_generator: next
          
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
            
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} run build
        
      # - name: Static HTML export with Next.js
      #   run: ${{ steps.detect-package-manager.outputs.runner }} next export
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-static-artifact
          path: ./build

  # Deployment job
  deploy:
    needs: build 
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.GITHUB_ACTION_ROLE }}
          role-duration-seconds: 1200
          role-session-name: GitHubActions
          
      - name: Check if S3 bucket is not empty and backup old source
        run: |
          if aws s3 ls s3://${{ env.S3_BUCKET }}/ --recursive | grep -q '.*'; then
            echo "Bucket is not empty, backing up..."
            aws s3 sync s3://${{ env.S3_BUCKET }}/ s3://${{ env.S3_BUCKET_BACKUP }}/$(date +%Y-%m-%d-%H-%M-%S)/
          else
            echo "Bucket is empty, no backup needed."
          fi
        # Replace `S3_BUCKET_BACKUP` with your backup bucket name or a different path in the same bucket
        # This command checks if the bucket is not empty before proceeding with the backup

      - name: Deploy to Amazon S3
        run: aws s3 sync ./build/* s3://${{ env.S3_BUCKET }}/ --delete
        # Make sure the path './build' matches the output directory of your project
  
      - name: Invalidate CloudFront Distribution (optional)
        run: aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"

      - name: Display CloudFront URL
        run: echo "Your CloudFront distribution URL is: https://${{ env.CLOUDFRONT_URL }}"




